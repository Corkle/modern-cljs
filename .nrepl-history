(start-repl)
(js/alert "Hello, ClojureScript")
:cljs/quit
(start-repl)
js/window
js/document
js/console
(js/console.log "Hello from CLJS!")
(js/document.getElementById "loginForm")
(.log js/console "Again...")
(.getElementById js/document "email")
(.-value (.getElementById js/document "email"))
(set! (.value (.getElementById js/document "email")) "EMAILS!!!")
(set! (.-value (.getElementById js/document "email")) "EMAILS!!!")
(.-value (.getElementById js/document "email"))
(doc defn)
(source let)
(require '[modern-cljs.login :as l] :reload)
l/validate-form
(source l/validate-form)
(l/validate-form)
l/validate-form
(source l/validate-form)
(l/validate-form)
exit
(start-repl)
(require '[domina.core :refer [by-id value set-value!]])
(doc by-id)
(by-id "email")
(require '[modern-cljs.login :refer [validate-form]])
(start-repl)
(require '[domina.core :refer [by-id value set-value!]])
(require '[modern-cljs.login :refer [validate-form]])
l/validate-form
validate-form
(set-value! (by-id "email") "Youremailsucks")
(set-value! (by-id "password") "Youremailsucks")
(validate-form)
(value (by-id "quantity"))
(require '[modern-cljs.shopping :as s] :reload)
s/calculate
(require '[modern-cljs.login :as l] :reload)
(l/validate-form)
(.-onsubmit (by-id "loginForm"))
(.-onload js/window)
(l/validate-form)
(.-onsubmit (by-id "loginForm"))
(l/init)
(.-onsubmit (by-id "loginForm"))
exit
(start-repl)
